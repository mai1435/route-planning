using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using SocialCar.RoutePlanner.Routing.Nodes;

namespace SocialCar.RoutePlanner.Carpools
{
    [Serializable]
    public class CarPoolerDataVersioned
    {
        public List<Carpooler> Carpoolers = new List<Carpooler>();
        public CarpoolerVersion Version;
    }

    //
    // Summary:
    //     Specifies the source of the carpooling ride
    public enum SourceCPRide
    {
        //
        // Summary:
        //     This is returned by the System.Xml.XmlReader if a Read method has not been called.
        Unknown = 0,
        //
        // Summary:
        //     An element (for example, <item> ).
        SocialCar = 1,
        //
        // Summary:
        //     An attribute (for example, id='123' ).
        External = 2,
    }

    [Serializable]
    public class CarpoolerVersion
    {
        public int version;
        public long timestampVersion;
        public int nightly_version;
        public long nightly_timestampVersion;
        public string nameSite;

        public CarpoolerVersion(int version, long timestampVersion, string nameSite, int nightly_version, long nightly_timestampVersion)
        {
            this.version = version;
            this.timestampVersion = timestampVersion;
            this.nightly_version = nightly_version;
            this.nightly_timestampVersion = nightly_timestampVersion;
            this.nameSite = nameSite;
        }
    }

    [Serializable]
    public class Carpooler
    {
        private List<int> ArrivalTimes = new List<int>();

        public List<Point> WayPointsOrig = new List<Point>();
        public List<Point> WayPointsUsed = new List<Point>();
        public List<Routing.Connections.CConnection> Connections;
        public CNode Source { get; private set; }

        public string Name;
        public string Id;
        public int TripStartTime;
        public int Capacity;
        public string TripDate;
        public bool Activated;
        public SourceCPRide Provider;
        public List<long> networkIdCCList = new List<long> { };

        public Carpooler(string id, string name, int tripStartTime, int capacity, bool activated, string startDate, SourceCPRide provider)
        {
            this.Id = id;
            this.Name = name;
            this.TripStartTime = tripStartTime;
            this.Connections = new List<Routing.Connections.CConnection>();
            this.ArrivalTimes.Add(tripStartTime);
            this.Capacity = capacity;
            this.Activated = activated;
            this.TripDate = startDate;
            this.Provider = provider;
        }

        public int GetLastArrivalTime()
        {
            return ArrivalTimes.Last();
        }

        public void SetSource(CNode N)
        {
            Source = N;
        }

        public void AddNextArrivalTime(int time)
        {
            ArrivalTimes.Add(time);
        }

        public void AddConnection(ref Routing.Connections.CConnection C)
        {
            this.Connections.Add(C);
        }
    }

    /*
     * This class is automatically generated by http://json2csharp.com/
     */ 
    public class CarpoolerJson
    {
        public List<Ride> rides { get; set; }

        public class Ride
        {
            public bool activated { get; set; }
            public string name { get; set; }
            public string polyline { get; set; }
            public string _id { get; set; }
            public int date { get; set; }
            public string car_id { get; set; }
            public List<object> lifts { get; set; }
            public string driver_id { get; set; }
            public StartPoint start_point { get; set; }
            public EndPoint end_point { get; set; }
            public Extras extras { get; set; }
        }

        public class Extras
        {
            public string url { get; set; }
            public string uuid { get; set; }
        }

        public class StartPoint
        {
            public double lat { get; set; }
            public double lon { get; set; }
        }

        public class EndPoint
        {
            public double lat { get; set; }
            public double lon { get; set; }
        }

    }

    /*
     * This class is automatically generated by http://json2csharp.com/
     */
    public class CarpoolerVersionJson
    {
        public List<Site> sites { get; set; }

        public class Site
        {
            public BoundingBox bounding_box { get; set; }
            public string name { get; set; }
            public CarpoolingInfo carpooling_info { get; set; }
            public string _id { get; set; }
            public string url { get; set; }
        }

        public class BoundingBox
        {
            public double min_lon { get; set; }
            public double max_lat { get; set; }
            public double min_lat { get; set; }
            public double max_lon { get; set; }
        }

        public class CarpoolingInfo
        {
            public long updated { get; set; }
            public int version { get; set; }
        }
    }

    public class CarpoolDiff
    {
        public List<Carpooler> ElementsToRemove = new List<Carpooler>();
        public List<Carpooler> ElementsToAdd = new List<Carpooler>();
        public List<Carpooler> ElementsToIgnore = new List<Carpooler>();
    }

    public class ValidityDayTableEntry
    {
        public string RideId;
        public string RideDate;
        public bool Activated;

        public ValidityDayTableEntry (string rideId, string rideDate, bool activated)
        {
            this.RideId = rideId;
            this.RideDate = rideDate;
            this.Activated = activated;
        }
    }

    public class CCValidityStartDayTable
    {
        public List<ValidityDayTableEntry> Entries = new List<Carpools.ValidityDayTableEntry>();

        /* Check if the carpooling ride id is activated and is enabled by checking the date */
        public bool IsValidDate(string dateS, string rideId, bool activated)
        {
            long dateL = Convert.ToInt64(dateS);

            foreach (ValidityDayTableEntry table in Entries)
            {
                long dateC = Convert.ToInt64(table.RideDate);
                if ( (rideId == table.RideId) && (dateL == dateC) && (activated == true) )
                    return true;
            }

            return false;
        }
    }
}
